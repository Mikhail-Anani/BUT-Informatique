<recherche_genre>
    <div class="container"> 
        <recherche></recherche>
        <div class="main-content">
            <div id="miniBandeau">
                <h2>{state.trie}</h2>
                <p id="nPage">page: {state.currentPage}</p>
            </div>
            <div class="grid">
                <div each="{ film in state.films }" class="item">
                    <a href="#/{this.props.filmType}/detail/{film.id}">
                        <img src="{ film.poster_path }" alt="{ film.title }">
                        <div class="details">
                            <h3>{ film.title }</h3>
                            <p if="{ film.genres }">Genres: { film.genres.join(', ') }</p>
                            <p>Langue originale: { film.original_language }</p>
                            <p>Note: { film.vote_average }</p>
                        </div>
                    </a>
                </div>
            </div>
            <div class="pagination">
                <button id="bt_page_precedente" class="bt_pagin" onclick={decrementPage}>&laquo; Précédent</button>
                <button class="bt_pagin">{state.currentPage}</button>
                <button id="bt_page_suivant" class="bt_pagin" onclick={incrementPage}>Suivant &raquo;</button>
            </div>
        </div>
    </div>

    <script>
        export default {
            state: {
                films: [],
                currentPage: 1,
                trie: '',
                type: '',
                lastGenreId: '',
                lastType: '',
                genres: [
                    ["28", "Action"],
                    ["10759", "Action & Aventure"],
                    ["10762", "Kids"],
                    ["10763", "News"],
                    ["10764", "Reality"],
                    ["10765", "Science-Fiction & Fantastique"],
                    ["10766", "Soap"],
                    ["10767", "Talk"],
                    ["10768", "War & Politics"],
                    ["12", "Aventure"],
                    ["16", "Animation"],
                    ["35", "Comédie"],
                    ["80", "Crime"],
                    ["99", "Documentaire"],
                    ["18", "Drame"],
                    ["10751", "Familiale"],
                    ["14", "Fantastique"],
                    ["36", "Histoire"],
                    ["27", "Horreur"],
                    ["10402", "Musique"],
                    ["9648", "Mystère"],
                    ["10749", "Romance"],
                    ["878", "Science-Fiction"],
                    ["10770", "Téléfilm"],
                    ["53", "Thriller"],
                    ["10752", "Guerre"],
                    ["37", "Western"]
                ]
            },

            onMounted() {
                this.updateFilmsAndGenre();
                if(this.props.filmType == "multi"){
                    this.state.type = "multi";
                }
                else if(this.props.filmType == "tv"){
                    this.state.type = "séries";
                }
                else{
                    this.state.type = "films";
                }
            },

            onUpdated() {
                if (this.props.genreId !== this.state.lastGenreId || this.state.currentPage !== this.state.lastPage || this.props.filmType !== this.state.lastType) {
                    if(this.props.filmType == "multi"){
                        this.state.type = "multi";
                    }
                    else if(this.props.filmType == "tv"){
                        this.state.type = "séries";
                    }
                    else{
                        this.state.type = "films";
                    }
                    this.updateFilmsAndGenre();
                }
            },

            updateFilmsAndGenre() {
                const genreId = this.props.genreId;

                
                if (genreId !== this.state.lastGenreId || this.props.filmType !== this.state.lastType) {

                    this.state.currentPage = 1; 
                    this.fetchFilms(genreId); 
                    this.state.lastGenreId = genreId;
                    this.state.lastType = this.props.filmType;
                    this.state.lastPage = 1;
                    this.state.trie = 'Liste des ' + this.state.type + ' triés par genre: ' + this.trouverNomGenreParId(genreId);
                } else if (this.state.currentPage !== this.state.lastPage) {
                    this.fetchFilms(genreId);
                    this.state.lastPage = this.state.currentPage;
                }
                this.update();
            },

            fetchFilms(val) {
                fetch(`https://api.themoviedb.org/3/discover/${this.props.filmType}?api_key=143c38a426bcb241741fcffb55828445&language=fr-FR&sort_by=popularity.desc&include_adult=false&include_video=false&with_genres=${val}&page=${this.state.currentPage}`)
                .then(response => response.json())
                .then(data => {
                    console.log(data.results);
                    if(data.results.length == 0){
                        window.location.href = "#/recherche/mauvais/genre";
                    }
                    this.update({ films: data.results.map(film => ({
                        ...film,
                        poster_path: `https://image.tmdb.org/t/p/w500${film.poster_path}`,
                    })),
                    });
                })
                .catch(error => console.error('Erreur de chargement des films:', error));
            },

            trouverNomGenreParId(id) {
                const genre = this.state.genres.find(genre => genre[0] === id);
                return genre ? genre[1] : 'Non trouvé';
            },

            convertGenreIdsToNames(genreIds) {
                return genreIds.map(id => this.trouverNomGenreParId(id.toString())).filter(name => name !== 'Non trouvé');
            },

            decrementPage() {
                if (this.state.currentPage > 1) {
                    this.update({ currentPage: this.state.currentPage - 1 });
                }
                setTimeout(() => {
                    window.scrollTo({
                        top: 0,
                        behavior: 'smooth'
                    });
                }, 10); 
            },

            incrementPage() {
                if (this.state.currentPage < 50) { // Remplacer 50 par votre logique de pagination
                    this.update({ currentPage: this.state.currentPage + 1 });
                }
                setTimeout(() => {
                    window.scrollTo({
                        top: 0,
                        behavior: 'smooth'
                    });
                }, 10); 
            },
        }
    </script>
</recherche_genre>